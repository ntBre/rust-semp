# -*- org-todo-keyword-faces: (("CHECKPOINT" . "blue") ("WAIT" . "#fce803")); -*-
#+TODO: TODO WAIT | DONE
#+TODO: | CHECKPOINT

this time write input as needed, not all at once. the first three all need to
be inside of the 'as needed' part -> iterator returning jobs?
- if I can set up a list of structs containing all the info necessary for a
  job, I can map over that and submit as I go
- use Iter.take(n) to grab the first n, I guess you slice off the front n
  elements of the original slice after that

see [[https://msfjarvis.dev/posts/building-static-rust-binaries-for-linux/][this]] if I have trouble with static binaries

* tasks
** DONE load geometries
** DONE write .mop input files
** DONE write param file
** DONE write submission scripts
** DONE process MOPAC output
** WAIT submit submission scripts
   - need real submission and also test implementation
   - both in place but both need to be tested
** TODO monitor jobs
   - this actually includes building the jobs as well since I want to build and
     submit them as needed, obeying joblimit
** TODO clean up after above as stuff finishes
** CHECKPOINT above are the essentials
** TODO assemble Jacobian matrix
** TODO load energies
** TODO do matrix math
** TODO implement levmar
** CHECKPOINT below are niceties
** TODO read config file

* basic job-running outline
** generate list of Mopacs
** as needed, turn mopacs into jobs
   - write input file
   - write param file
   - write submission script
   - the last two of these need to be chunked and chunked separately
     - only need to write a new param file when the parameters change
       - share it across forward/back of numjac and across a run of single
         semi-empirical vector run
     - write a new submission script per chunksize jobs
** submit these jobs
** poll finishing jobs and extract energies
** delete finished jobs
   - mop, out, aux, arc
   - param file - when shared jobs done
   - pbs file - when different set of shared jobs done
